Graph Representation
  Adjacency matrix 
  Adjacency list
ADJACENCY MATRIX
  #include<bits/stdc++.h>
  using namespace std;
  const int n=1e3+10
  int garph[n][n];
  int main()
  {
    int n,m;          //n vertices and m edges
    cin>>n>>m;
    for(int i=0;i<m;i++)
    {
      int v1,v2;
      graph[v1][v2]=1;
      graph[v2][v1]=1
    }
  }
  
 //Complexity:O(v2) space
 
 ADJACENCY LIST
    #include<bits/stdc++.h>
  using namespace std;
  const int n=1e3+10
  int garph1[n][n];
  vector<int>graph2[n]
  int main()
  {
    int n,m;          //n vertices and m edges
    cin>>n>>m;
    for(int i=0;i<m;i++)
    {
      int v1,v2;
      
      graph2[v1].push_back(v2);
      graph[v2].push_back(v1);
    }
  }
   //Space Timecomplexity:O(V+E)
   n!=1e5  n<=1e3
   
   WEGIHTED ADJACENCY LIST 
   
  #include<bits/stdc++.h>
  using namespace std;
  const int n=1e3+10
  int garph1[n][n];
  vector<pair<int,int>>graph2[n]
  int main()
  {
    int n,m,wt;          //n vertices and m edges
    cin>>n>>m>>wt;
    for(int i=0;i<m;i++)
    {
      int v1,v2;
      
      graph2[v1].push_back({v2,wt});
      graph[v2].push_back({v1,wt});
    }
  }
  
 
  
